{{~def 'prjId' (asJavaId ghProjectId)~}}
{{~#def 'githubProjectUrl'}}https://github.com/{{ghProjectOwner}}/{{ghProjectId}}{{/def~}}
{{~#def 'githubRepoUrl'}}{{githubProjectUrl}}.git{{/def~}}

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign
import javax.swing.*

plugins {
    id 'java'
    {{#ifb (and appMainClass (not multiModule))}}id 'application'{{/ifb}}
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"}

project.version.with {
    major = {{prjId}}VersionMajor as int
    minor= {{prjId}}VersionMinor as int
    patch = {{prjId}}VersionPatch as int
    if (project.hasProperty('{{prjId}}VersionLabel')) {
        preRelease = {{prjId}}VersionLabel
    }
    releaseBuild = Boolean.valueOf({{prjId}}ReleaseBuild)
}
ext.{{prjId}}Version = project.version as String
ext.{{prjId}}Tag = Boolean.valueOf({{prjId}}ReleaseBuild) ? "v$ext.{{prjId}}Version" : 'master'




group = '{{group}}'
version = {{prjId}}Version

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}



        
repositories {
    jcenter()
    mavenCentral()
}



sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding



dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

    runtime ('ch.qos.logback:logback-classic:1.1.7')
}

jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': {{prjId}}Version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}

artifacts {
    archives(sourcesJar, javadocJar)
}




{{#each modules~}}
{{#def 'projectBlockPrefix'}}project('{{artifact}}') { {{/def}}
{{#encloseIf multiModule prefix=projectBlockPrefix suffix="}"~}}

{{~#if multiModule}}
{{#ifb (and appMainClass (compare artifact '==' appModule.artifact))}}apply plugin: 'application'{{/ifb}}
dependencies {
    {{~#each dependsOn}}
    compile project(':{{artifact}}')
    {{~/each}}
    {{#ifb (and appMainClass (compare artifact '==' appModule.artifact))}}runtime ('ch.qos.logback:logback-classic:1.1.7'){{/ifb}}
}
{{~/if}}
{{~#ifb (compare artifact '==' appModule.artifact)}}
artifacts {
    archives(sourcesJar, javadocJar)
}
{{~#if appMainClass}}
jar {
    manifest {
        attributes 'Main-Class': '{{appModule.basePackage}}.{{appMainClass}}'
    }
}
mainClassName = '{{appModule.basePackage}}.{{appMainClass}}'

applicationName = "{{prjId}}"

startScripts {
    defaultJvmOpts = ['-Dlogback.configurationFile=logback.xml']
}

applicationDistribution.from("${rootProject.projectDir}/dist") {
    filter(ReplaceTokens, tokens:[{{prjId}}Version : {{prjId}}Version])
}

applicationDistribution.from("${rootProject.projectDir}/..") {
    include('LICENSE')
}
{{~/if}}
{{~/ifb}}
{{/encloseIf}}
{{/each}}


